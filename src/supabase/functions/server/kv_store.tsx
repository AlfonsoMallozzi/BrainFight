/* AUTOGENERATED FILE - DO NOT EDIT CONTENTS (you can edit for fixes) */

/* Table schema:
CREATE TABLE kv_store_83bde5a9 (
  key TEXT NOT NULL PRIMARY KEY,
  value JSONB NOT NULL
);
*/

import { createClient } from "jsr:@supabase/supabase-js@2.49.8";

const client = () => createClient(
  Deno.env.get("SUPABASE_URL"),
  Deno.env.get("SUPABASE_SERVICE_ROLE_KEY"),
);

// Set stores a key-value pair in the database.
export const set = async (key: string, value: any): Promise<void> => {
  const supabase = client();
  const { error } = await supabase.from("kv_store_83bde5a9").upsert({
    key,
    value
  });
  if (error) {
    throw new Error(error.message);
  }
};

// Get retrieves a key-value pair from the database.
export const get = async (key: string): Promise<any> => {
  const supabase = client();
  const { data, error } = await supabase
    .from("kv_store_83bde5a9")
    .select("value")
    .eq("key", key)
    .maybeSingle();
  if (error) {
    throw new Error(error.message);
  }
  return data?.value;
};

// Delete deletes a key-value pair from the database.
export const del = async (key: string): Promise<void> => {
  const supabase = client();
  const { error } = await supabase.from("kv_store_83bde5a9").delete().eq("key", key);
  if (error) {
    throw new Error(error.message);
  }
};

// Sets multiple key-value pairs in the database.
export const mset = async (keys: string[], values: any[]): Promise<void> => {
  const supabase = client();
  const { error } = await supabase.from("kv_store_83bde5a9").upsert(keys.map((k, i) => ({ key: k, value: values[i] })));
  if (error) {
    throw new Error(error.message);
  }
};

// Gets multiple key-value pairs from the database.
export const mget = async (keys: string[]): Promise<any[]> => {
  const supabase = client();
  const { data, error } = await supabase.from("kv_store_83bde5a9").select("key, value").in("key", keys);
  if (error) {
    throw new Error(error.message);
  }
  // return array of values (preserves order roughly)
  return data?.map((d) => d.value) ?? [];
};

// Deletes multiple key-value pairs from the database.
export const mdel = async (keys: string[]): Promise<void> => {
  const supabase = client();
  const { error } = await supabase.from("kv_store_83bde5a9").delete().in("key", keys);
  if (error) {
    throw new Error(error.message);
  }
};

// Search for key-value pairs by prefix.
// NOTE: now returns array of objects { key, value } so caller can access both.
export const getByPrefix = async (prefix: string): Promise<Array<{ key: string, value: any }>> => {
  const supabase = client();
  const { data, error } = await supabase.from("kv_store_83bde5a9").select("key, value").like("key", prefix + "%");
  if (error) {
    throw new Error(error.message);
  }
  return data ?? [];
};

/**
 * addPlayerToRoom:
 * Atomically-ish add a playerId to the `players` array inside the room value at `roomKey`.
 * Retries a few times on concurrent updates to reduce race conditions.
 *
 * Usage:
 *   const room = await addPlayerToRoom(`room:${roomId}`, playerId);
 *   // returns updated room object
 */
export const addPlayerToRoom = async (roomKey: string, playerId: string, maxRetries = 5): Promise<any> => {
  const supabase = client();

  for (let attempt = 0; attempt < maxRetries; attempt++) {
    // read current room
    const { data, error: getError } = await supabase
      .from("kv_store_83bde5a9")
      .select("value")
      .eq("key", roomKey)
      .maybeSingle();

    if (getError) throw new Error(getError.message);

    const current = data?.value;
    if (!current) {
      throw new Error("room-not-found");
    }

    // ensure players array exists
    current.players = Array.isArray(current.players) ? current.players : [];

    // if already joined, return current
    if (current.players.includes(playerId)) return current;

    // check capacity if you want (e.g. 100)
    if (current.players.length >= (current.maxPlayers ?? 100)) {
      throw new Error("room-full");
    }

    // push new player
    const updated = { ...current, players: [...current.players, playerId] };

    // try update (use update instead of upsert to not change key)
    const { error: updateError } = await supabase
      .from("kv_store_83bde5a9")
      .update({ value: updated })
      .eq("key", roomKey);

    if (!updateError) {
      // success
      return updated;
    }

    // if update failed, loop and retry (concurrent writer); small delay
    await new Promise((r) => setTimeout(r, 30 + Math.random() * 100));
  }

  throw new Error("failed-to-join-after-retries");
};
