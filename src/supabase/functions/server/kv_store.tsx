/* AUTOGENERATED FILE - DO NOT EDIT CONTENTS (you can edit for fixes) */

import { createClient } from "jsr:@supabase/supabase-js@2.49.8";

const client = () =>
  createClient(
    Deno.env.get("SUPABASE_URL"),
    Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")
  );

// --- Set stores a key-value pair in the database ---
export const set = async (key: string, value: any): Promise<void> => {
  const supabase = client();
  const { error } = await supabase.from("kv_store_83bde5a9").upsert({
    key,
    value: typeof value === "string" ? value : JSON.stringify(value),
  });
  if (error) throw new Error(error.message);
};

// --- Get retrieves a key-value pair from the database ---
export const get = async (key: string): Promise<any> => {
  const supabase = client();
  const { data, error } = await supabase
    .from("kv_store_83bde5a9")
    .select("value")
    .eq("key", key)
    .maybeSingle();
  if (error) throw new Error(error.message);
  if (!data?.value) return null;

  try {
    return typeof data.value === "string" ? JSON.parse(data.value) : data.value;
  } catch {
    return data.value;
  }
};

// --- Delete deletes a key-value pair from the database ---
export const del = async (key: string): Promise<void> => {
  const supabase = client();
  const { error } = await supabase.from("kv_store_83bde5a9").delete().eq("key", key);
  if (error) throw new Error(error.message);
};

// --- Sets multiple key-value pairs ---
export const mset = async (keys: string[], values: any[]): Promise<void> => {
  const supabase = client();
  const { error } = await supabase.from("kv_store_83bde5a9").upsert(
    keys.map((k, i) => ({
      key: k,
      value: typeof values[i] === "string" ? values[i] : JSON.stringify(values[i]),
    }))
  );
  if (error) throw new Error(error.message);
};

// --- Gets multiple key-value pairs ---
export const mget = async (keys: string[]): Promise<any[]> => {
  const supabase = client();
  const { data, error } = await supabase
    .from("kv_store_83bde5a9")
    .select("key, value")
    .in("key", keys);
  if (error) throw new Error(error.message);
  return (data ?? []).map((d) =>
    typeof d.value === "string" ? JSON.parse(d.value) : d.value
  );
};

// --- Deletes multiple key-value pairs ---
export const mdel = async (keys: string[]): Promise<void> => {
  const supabase = client();
  const { error } = await supabase.from("kv_store_83bde5a9").delete().in("key", keys);
  if (error) throw new Error(error.message);
};

// --- Search for key-value pairs by prefix ---
export const getByPrefix = async (
  prefix: string
): Promise<Array<{ key: string; value: any }>> => {
  const supabase = client();
  const { data, error } = await supabase
    .from("kv_store_83bde5a9")
    .select("key, value")
    .like("key", prefix + "%");
  if (error) throw new Error(error.message);
  return (data ?? []).map((d) => ({
    key: d.key,
    value: typeof d.value === "string" ? JSON.parse(d.value) : d.value,
  }));
};

/**
 * addPlayerToRoom:
 * Atomically-ish add a playerId to the `players` array inside the room value at `roomKey`.
 */
export const addPlayerToRoom = async (
  roomKey: string,
  playerId: string,
  maxRetries = 5
): Promise<any> => {
  const supabase = client();

  for (let attempt = 0; attempt < maxRetries; attempt++) {
    // read current room
    const { data, error: getError } = await supabase
      .from("kv_store_83bde5a9")
      .select("value")
      .eq("key", roomKey)
      .maybeSingle();

    if (getError) throw new Error(getError.message);

    const current = data?.value
      ? typeof data.value === "string"
        ? JSON.parse(data.value)
        : data.value
      : null;

    if (!current) {
      throw new Error("room-not-found");
    }

    // ensure players array exists
    current.players = Array.isArray(current.players) ? current.players : [];

    // if already joined, return current
    if (current.players.includes(playerId)) return current;

    // check capacity
    if (current.players.length >= (current.maxPlayers ?? 100)) {
      throw new Error("room-full");
    }

    // push new player
    const updated = { ...current, players: [...current.players, playerId] };

    // try update (use update instead of upsert to not change key)
    const { error: updateError } = await supabase
      .from("kv_store_83bde5a9")
      .update({ value: updated })
      .eq("key", roomKey);

    if (!updateError) {
      return updated;
    }

    await new Promise((r) => setTimeout(r, 30 + Math.random() * 100));
  }

  throw new Error("failed-to-join-after-retries");
};
